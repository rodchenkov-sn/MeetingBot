version: "3"

services:

  redis-service:
    image: redis:latest
    ports:
      - 127.0.0.1:6379:6379
    command: redis-server
    networks:
      - internal-net
    logging:
      driver: none

  database:
    image: mongo:latest
    networks:
      - internal-net
    environment:
      - MONGO_INITDB_DATABASE=MeetingBotDB
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./systest-init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - '27017-27019:27017-27019'
    logging:
      driver: none

  calendar-service:
    networks:
      - internal-net
    build:
      context: ./
      dockerfile: test/mock_calendar_service/Dockerfile
    command: python startup.py
    ports: 
      - 50053:50053

  backend-service-1:
    networks:
      - internal-net
    build:
      context: ./
      dockerfile: backend_server/DockerfileSysTest
    command: python startup.py
    ports:
      - 50063:50063
    depends_on:
      - database
      - calendar-service

  backend-service-2:
    networks:
      - internal-net
    build:
      context: ./
      dockerfile: backend_server/DockerfileSysTest
    command: python startup.py
    ports:
      - 50062:50062
    depends_on:
      - database
      - calendar-service

  nginx-service:
    image: nginx
    networks:
      - internal-net
    ports:
      - 50052:50052
    depends_on:
      - backend-service-1
      - backend-service-2
    volumes:
      - ./systest-nginx.conf:/etc/nginx/nginx.conf:ro
      - .:/var/log/nginx
    logging:
      driver: none

  frontend-service:
    networks:
      - internal-net
    build:
      context: ./
      dockerfile: frontend_server/Dockerfile
    command: python startup.py
    ports:
      - 50051:50051
    depends_on:
      - nginx-service

  file-service:
    networks:
      - internal-net
    build:
      context: ./
      dockerfile: test/mock_file_service/Dockerfile
    command: python main.py
    ports:
      - 50054:50054

  tg-api-adapter:
    build:
      context: ./
      dockerfile: tg_api_adapter/DockerfileSysTest
    command: python startup.py
    depends_on:
      - frontend-service
      - redis-service
    networks:
      - internal-net
    logging:
      driver: none

  tg-test-service:
    container_name: tg-test-service
    build:
      context: ./
      dockerfile: test/tg_server_adapter/Dockerfile
    networks:
      - internal-net
    depends_on:
      - tg-api-adapter
    command: pytest -v
    ports:
      - 9000:9000

networks:
  internal-net:
    driver: bridge
