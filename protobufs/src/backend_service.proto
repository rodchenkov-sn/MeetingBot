syntax = "proto2";

message SimpleResponse {
    required bool ok = 1;
}

message EntityId {
    required int64 id = 1;
}

message CreateTeamMsg {
    required string name = 1;
    required int64 owner = 2;
}

message NamedInfo {
    required int64 id = 1;
    required string name = 2;
}

message MeetingInfo {
    required int64 id = 1;
    required int64 creator = 2;
    required int64 team = 3;
    required string desc = 4;
    required int64 time = 5;
}

message Participating {
    required int64 object = 1;
    required int64 subject = 2;
}

message TeamPolicy {
    required int64 groupId = 1;
    required bool allowUsersToCreateMeetings = 2;
    required bool needApproveForMeetingCreation = 3;
}

service BackendService {
    rpc CreateTeam (CreateTeamMsg) returns (EntityId);
    rpc GetOwnedTeams (EntityId) returns (stream NamedInfo);
    rpc GetTeamInfo (EntityId) returns (NamedInfo);
    rpc AddTeamMember (Participating) returns (SimpleResponse);
    rpc GetTeamMembers (EntityId) returns (stream EntityId);

    rpc CreateMeeting (MeetingInfo) returns (EntityId);
    rpc UpdateMeetingInfo (MeetingInfo) returns (SimpleResponse);
    rpc GetOwnedMeetings (EntityId) returns (stream NamedInfo);
    rpc AddParticipant (Participating) returns (SimpleResponse);
    rpc GetMeetingInfo (EntityId) returns (MeetingInfo);
    rpc ApproveMeeting (EntityId) returns (SimpleResponse);
    rpc GetGroupMeetings (EntityId) returns (stream NamedInfo);

    rpc GetGroupOwner (EntityId) returns (EntityId);
    rpc GetGroupPolicy (EntityId) returns (TeamPolicy);
    rpc SetGroupPolicy (TeamPolicy) returns (SimpleResponse);
}
